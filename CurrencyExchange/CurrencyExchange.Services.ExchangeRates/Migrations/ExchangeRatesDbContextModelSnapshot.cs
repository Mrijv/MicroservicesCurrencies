// <auto-generated />
using System;
using CurrencyExchange.ExchangeRates.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyExchange.Services.ExchangeRates.Migrations
{
    [DbContext(typeof(ExchangeRatesDbContext))]
    partial class ExchangeRatesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencyExchange.Services.ExchangeRates.Entities.CurrencyRate", b =>
                {
                    b.Property<Guid>("CurrencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyTo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.Property<DateTime>("RetrievalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeStamp")
                        .HasColumnType("int");

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("BaseCurrency");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("CurrencyExchange.Services.ExchangeRates.Entities.Symbol", b =>
                {
                    b.Property<string>("SymbolTag")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SymbolTag");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("CurrencyExchange.Services.ExchangeRates.Entities.CurrencyRate", b =>
                {
                    b.HasOne("CurrencyExchange.Services.ExchangeRates.Entities.Symbol", "Symbol")
                        .WithMany("Rates")
                        .HasForeignKey("BaseCurrency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CurrencyExchange.Services.ExchangeRates.Entities.Symbol", b =>
                {
                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
